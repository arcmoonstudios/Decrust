// decrust-promac/tests/test_fix_generators_part1.rs
//
// This file tests the fix generators functionality in decrust-promac
// Part 1 of the fix generator tests

use decrust_promac_runtime::backtrace::DecrustBacktrace as Backtrace;
use decrust_promac_runtime::types::ErrorCategory;
use decrust_promac_runtime::DecrustError;
use decrust_promac_runtime::OptionalError;
use std::path::PathBuf;

// Helper function to create a validation error
#[allow(dead_code)]
fn create_validation_error(field: &str, message: &str) -> DecrustError {
    DecrustError::Validation { field: field.to_string(), message: message.to_string(), expected: None, actual: None, rule: None, backtrace: Backtrace::capture(), }
}

// Helper function to create an IO error
fn create_io_error(
    kind: std::io::ErrorKind,
    operation: &str,
    path: Option<PathBuf>,
) -> DecrustError {
    DecrustError::Io {
        source: std::io::Error::new(kind, "IO Error"),
        path,
        operation: operation.to_string(),
        backtrace: Backtrace::capture(),
    }
}

// Helper function to create a config error
fn create_config_error(message: &str, path: Option<PathBuf>) -> DecrustError {
    DecrustError::Config {
        message: message.to_string(),
        path,
        source: OptionalError(None),
        backtrace: Backtrace::capture(),
    }
}

// Helper function to create a not found error
fn create_not_found_error(resource_type: &str, identifier: &str) -> DecrustError {
    DecrustError::NotFound {
        resource_type: resource_type.to_string(),
        identifier: identifier.to_string(),
        backtrace: Backtrace::capture(),
    }
}

// Helper function to create a network error
#[allow(dead_code)]
fn create_network_error(url: &str, kind: &str) -> DecrustError {
    DecrustError::Network {
        source: Box::new(std::io::Error::new(
            std::io::ErrorKind::ConnectionRefused,
            "Connection refused",
        )),
        url: Some(url.to_string()),
        kind: kind.to_string(),
        backtrace: Backtrace::capture(),
    }
}

// Test 1: NotFound Fix Generator - File not found
#[test]
fn test_not_found_fix_generator_file() {
    // Create a not found error for a file
    let error = create_not_found_error("file", "config.json");

    // Verify the error category
    assert_eq!(error.category(), ErrorCategory::NotFound);

    // Verify the error message
    let error_string = format!("{}", error);
    assert!(error_string.contains("file"));
    assert!(error_string.contains("config.json"));
}

// Test 2: NotFound Fix Generator - Directory not found
#[test]
fn test_not_found_fix_generator_directory() {
    // Create a not found error for a directory
    let error = create_not_found_error("directory", "/tmp/logs");

    // Verify the error category
    assert_eq!(error.category(), ErrorCategory::NotFound);

    // Verify the error message
    let error_string = format!("{}", error);
    assert!(error_string.contains("directory"));
    assert!(error_string.contains("/tmp/logs"));
}

// Test 3: IO Missing Directory Fix Generator - Missing parent directory
#[test]
fn test_io_missing_directory_fix_generator_parent() {
    // Create an IO error for a missing parent directory
    let error = create_io_error(
        std::io::ErrorKind::NotFound,
        "open",
        Some(PathBuf::from("/nonexistent/dir/file.txt")),
    );

    // Verify the error category
    assert_eq!(error.category(), ErrorCategory::Io);

    // Verify the error message
    let error_string = format!("{}", error);
    assert!(error_string.contains("open"));
    assert!(error_string.contains("/nonexistent/dir/file.txt"));
}

// Test 4: IO Missing Directory Fix Generator - Missing file
#[test]
fn test_io_missing_directory_fix_generator_file() {
    // Create an IO error for a missing file
    let error = create_io_error(
        std::io::ErrorKind::NotFound,
        "read",
        Some(PathBuf::from("config.json")),
    );

    // Verify the error category
    assert_eq!(error.category(), ErrorCategory::Io);

    // Verify the error message
    let error_string = format!("{}", error);
    assert!(error_string.contains("read"));
    assert!(error_string.contains("config.json"));
}

// Test 5: IO Permission Fix Generator - Permission denied
#[test]
fn test_io_permission_fix_generator_denied() {
    // Create an IO error for permission denied
    let error = create_io_error(
        std::io::ErrorKind::PermissionDenied,
        "write",
        Some(PathBuf::from("/etc/hosts")),
    );

    // Verify the error category
    assert_eq!(error.category(), ErrorCategory::Io);

    // Verify the error message
    let error_string = format!("{}", error);
    assert!(error_string.contains("write"));
    assert!(error_string.contains("/etc/hosts"));
    // The error message might contain different variations of permission errors
    // The exact wording depends on the OS and error formatting
}

// Test 6: IO Permission Fix Generator - Read-only file
#[test]
fn test_io_permission_fix_generator_readonly() {
    // Create an IO error for a read-only file
    let error = create_io_error(
        std::io::ErrorKind::PermissionDenied,
        "modify",
        Some(PathBuf::from("readonly.txt")),
    );

    // Verify the error category
    assert_eq!(error.category(), ErrorCategory::Io);

    // Verify the error message
    let error_string = format!("{}", error);
    assert!(error_string.contains("modify"));
    assert!(error_string.contains("readonly.txt"));
}

// Test 7: Config Syntax Fix Generator - Invalid JSON
#[test]
fn test_config_syntax_fix_generator_json() {
    // Create a config error for invalid JSON
    let error = create_config_error(
        "Invalid JSON syntax at line 5: unexpected token",
        Some(PathBuf::from("config.json")),
    );

    // Verify the error category
    assert_eq!(error.category(), ErrorCategory::Configuration);

    // Verify the error message
    let error_string = format!("{}", error);
    assert!(error_string.contains("Invalid JSON syntax"));
    assert!(error_string.contains("config.json"));
}

// Test 8: Config Syntax Fix Generator - Invalid YAML
#[test]
fn test_config_syntax_fix_generator_yaml() {
    // Create a config error for invalid YAML
    let error = create_config_error(
        "Invalid YAML syntax: mapping values are not allowed in this context",
        Some(PathBuf::from("config.yaml")),
    );

    // Verify the error category
    assert_eq!(error.category(), ErrorCategory::Configuration);

    // Verify the error message
    let error_string = format!("{}", error);
    assert!(error_string.contains("Invalid YAML syntax"));
    assert!(error_string.contains("config.yaml"));
}

// Test 9: Config Missing Key Fix Generator - Missing required key
#[test]
fn test_config_missing_key_fix_generator_required() {
    // Create a config error for a missing required key
    let error = create_config_error(
        "Missing required configuration key: 'database.url'",
        Some(PathBuf::from("app.config")),
    );

    // Verify the error category
    assert_eq!(error.category(), ErrorCategory::Configuration);

    // Verify the error message
    let error_string = format!("{}", error);
    assert!(error_string.contains("Missing required configuration key"));
    assert!(error_string.contains("database.url"));
}

// Test 10: Config Missing Key Fix Generator - Missing optional key
#[test]
fn test_config_missing_key_fix_generator_optional() {
    // Create a config error for a missing optional key
    let error = create_config_error(
        "Missing optional configuration key: 'logging.level', using default: 'info'",
        Some(PathBuf::from("app.config")),
    );

    // Verify the error category
    assert_eq!(error.category(), ErrorCategory::Configuration);

    // Verify the error message
    let error_string = format!("{}", error);
    assert!(error_string.contains("Missing optional configuration key"));
    assert!(error_string.contains("logging.level"));
}
